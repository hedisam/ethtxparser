// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/hedisam/ethtxparser/internal/store"
	"sync"
)

// TxStoreMock is a mock implementation of rest.TxStore.
//
//	func TestSomethingThatUsesTxStore(t *testing.T) {
//
//		// make and configure a mocked rest.TxStore
//		mockedTxStore := &TxStoreMock{
//			GetCurrentBlockNumberFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetCurrentBlockNumber method")
//			},
//			GetTransactionsFunc: func(ctx context.Context, addr string) ([]*store.TxRecord, error) {
//				panic("mock out the GetTransactions method")
//			},
//		}
//
//		// use mockedTxStore in code that requires rest.TxStore
//		// and then make assertions.
//
//	}
type TxStoreMock struct {
	// GetCurrentBlockNumberFunc mocks the GetCurrentBlockNumber method.
	GetCurrentBlockNumberFunc func(ctx context.Context) (int64, error)

	// GetTransactionsFunc mocks the GetTransactions method.
	GetTransactionsFunc func(ctx context.Context, addr string) ([]*store.TxRecord, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCurrentBlockNumber holds details about calls to the GetCurrentBlockNumber method.
		GetCurrentBlockNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTransactions holds details about calls to the GetTransactions method.
		GetTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Addr is the addr argument value.
			Addr string
		}
	}
	lockGetCurrentBlockNumber sync.RWMutex
	lockGetTransactions       sync.RWMutex
}

// GetCurrentBlockNumber calls GetCurrentBlockNumberFunc.
func (mock *TxStoreMock) GetCurrentBlockNumber(ctx context.Context) (int64, error) {
	if mock.GetCurrentBlockNumberFunc == nil {
		panic("TxStoreMock.GetCurrentBlockNumberFunc: method is nil but TxStore.GetCurrentBlockNumber was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetCurrentBlockNumber.Lock()
	mock.calls.GetCurrentBlockNumber = append(mock.calls.GetCurrentBlockNumber, callInfo)
	mock.lockGetCurrentBlockNumber.Unlock()
	return mock.GetCurrentBlockNumberFunc(ctx)
}

// GetCurrentBlockNumberCalls gets all the calls that were made to GetCurrentBlockNumber.
// Check the length with:
//
//	len(mockedTxStore.GetCurrentBlockNumberCalls())
func (mock *TxStoreMock) GetCurrentBlockNumberCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetCurrentBlockNumber.RLock()
	calls = mock.calls.GetCurrentBlockNumber
	mock.lockGetCurrentBlockNumber.RUnlock()
	return calls
}

// GetTransactions calls GetTransactionsFunc.
func (mock *TxStoreMock) GetTransactions(ctx context.Context, addr string) ([]*store.TxRecord, error) {
	if mock.GetTransactionsFunc == nil {
		panic("TxStoreMock.GetTransactionsFunc: method is nil but TxStore.GetTransactions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Addr string
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockGetTransactions.Lock()
	mock.calls.GetTransactions = append(mock.calls.GetTransactions, callInfo)
	mock.lockGetTransactions.Unlock()
	return mock.GetTransactionsFunc(ctx, addr)
}

// GetTransactionsCalls gets all the calls that were made to GetTransactions.
// Check the length with:
//
//	len(mockedTxStore.GetTransactionsCalls())
func (mock *TxStoreMock) GetTransactionsCalls() []struct {
	Ctx  context.Context
	Addr string
} {
	var calls []struct {
		Ctx  context.Context
		Addr string
	}
	mock.lockGetTransactions.RLock()
	calls = mock.calls.GetTransactions
	mock.lockGetTransactions.RUnlock()
	return calls
}
