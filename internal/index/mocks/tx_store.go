// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/hedisam/ethtxparser/internal/store"
	"sync"
)

// TxStoreMock is a mock implementation of index.TxStore.
//
//	func TestSomethingThatUsesTxStore(t *testing.T) {
//
//		// make and configure a mocked index.TxStore
//		mockedTxStore := &TxStoreMock{
//			InsertBlockFunc: func(ctx context.Context, block *store.Block) error {
//				panic("mock out the InsertBlock method")
//			},
//		}
//
//		// use mockedTxStore in code that requires index.TxStore
//		// and then make assertions.
//
//	}
type TxStoreMock struct {
	// InsertBlockFunc mocks the InsertBlock method.
	InsertBlockFunc func(ctx context.Context, block *store.Block) error

	// calls tracks calls to the methods.
	calls struct {
		// InsertBlock holds details about calls to the InsertBlock method.
		InsertBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Block is the block argument value.
			Block *store.Block
		}
	}
	lockInsertBlock sync.RWMutex
}

// InsertBlock calls InsertBlockFunc.
func (mock *TxStoreMock) InsertBlock(ctx context.Context, block *store.Block) error {
	if mock.InsertBlockFunc == nil {
		panic("TxStoreMock.InsertBlockFunc: method is nil but TxStore.InsertBlock was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Block *store.Block
	}{
		Ctx:   ctx,
		Block: block,
	}
	mock.lockInsertBlock.Lock()
	mock.calls.InsertBlock = append(mock.calls.InsertBlock, callInfo)
	mock.lockInsertBlock.Unlock()
	return mock.InsertBlockFunc(ctx, block)
}

// InsertBlockCalls gets all the calls that were made to InsertBlock.
// Check the length with:
//
//	len(mockedTxStore.InsertBlockCalls())
func (mock *TxStoreMock) InsertBlockCalls() []struct {
	Ctx   context.Context
	Block *store.Block
} {
	var calls []struct {
		Ctx   context.Context
		Block *store.Block
	}
	mock.lockInsertBlock.RLock()
	calls = mock.calls.InsertBlock
	mock.lockInsertBlock.RUnlock()
	return calls
}
