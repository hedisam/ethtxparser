// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// SubscriptionStoreMock is a mock implementation of index.SubscriptionStore.
//
//	func TestSomethingThatUsesSubscriptionStore(t *testing.T) {
//
//		// make and configure a mocked index.SubscriptionStore
//		mockedSubscriptionStore := &SubscriptionStoreMock{
//			IsSubscribedFunc: func(ctx context.Context, addr string) (bool, error) {
//				panic("mock out the IsSubscribed method")
//			},
//		}
//
//		// use mockedSubscriptionStore in code that requires index.SubscriptionStore
//		// and then make assertions.
//
//	}
type SubscriptionStoreMock struct {
	// IsSubscribedFunc mocks the IsSubscribed method.
	IsSubscribedFunc func(ctx context.Context, addr string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// IsSubscribed holds details about calls to the IsSubscribed method.
		IsSubscribed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Addr is the addr argument value.
			Addr string
		}
	}
	lockIsSubscribed sync.RWMutex
}

// IsSubscribed calls IsSubscribedFunc.
func (mock *SubscriptionStoreMock) IsSubscribed(ctx context.Context, addr string) (bool, error) {
	if mock.IsSubscribedFunc == nil {
		panic("SubscriptionStoreMock.IsSubscribedFunc: method is nil but SubscriptionStore.IsSubscribed was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Addr string
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockIsSubscribed.Lock()
	mock.calls.IsSubscribed = append(mock.calls.IsSubscribed, callInfo)
	mock.lockIsSubscribed.Unlock()
	return mock.IsSubscribedFunc(ctx, addr)
}

// IsSubscribedCalls gets all the calls that were made to IsSubscribed.
// Check the length with:
//
//	len(mockedSubscriptionStore.IsSubscribedCalls())
func (mock *SubscriptionStoreMock) IsSubscribedCalls() []struct {
	Ctx  context.Context
	Addr string
} {
	var calls []struct {
		Ctx  context.Context
		Addr string
	}
	mock.lockIsSubscribed.RLock()
	calls = mock.calls.IsSubscribed
	mock.lockIsSubscribed.RUnlock()
	return calls
}
